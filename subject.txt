Goals - Цели

Разбивка целей проекта

Этот проект можно разбить на три отличительные части:

• Ассемблер: это программа, которая скомпилирует ваших чемпионов и переведет их
с языка, на котором вы будете их писать (язык ассемблера), в «Байт-код».
Байт-код - это машинный код, который будет напрямую интерпретироваться
виртуальной машиной.

• Виртуальная машина: это «арена», на которой будут казнены ваши чемпионы. Он
предлагает различные функции, все из которых будут полезны для битвы чемпионов.
Очевидно, что виртуальная машина должна учитывать множество одновременных
процессов;
Мы просим вас о гладиаторской схватке, а не об одиночном симуляторе шоу.

• Чемпион: это особый случай. Позже, в чемпионате, вам нужно будет отрисовать
сверхмощного чемпиона, который напугает персонал команды до смерти. Однако
рендеринг такого рода чемпионов - серьезная работа. А поскольку сейчас нас
больше всего интересует ваша способность создавать другие программы Corewar
(например, ассемблер и виртуальную машину), вашему действующему чемпиону нужно
только доказать нам, что вы можете писать кусочки Corewar ASM. Это означает, что
чемпион, которого вы должны оказать за этот проект, должен только напугать
bejesus из неврастенического ежа.

General Instructions - Основные инструкции

• Этот проект будет корректироваться только людьми. Вам разрешено упорядочивать
и называть файлы по своему усмотрению, но вы должны соблюдать следующие правила.
• Исполняемый файл должен иметь имена asm и corewar.
• У вашего чемпиона должно быть величественное, эпическое, славное имя.
• Ваш Makefile должен компилировать проект и должен содержать обычные правила.
Он должен перекомпилировать и заново связать программу только при необходимости.
• Если вы сообразительны, вы будете использовать свою библиотеку для своей
основной войны. Отправьте также вашу папку libft, включая собственный Makefile,
в корень вашего хранилища. Ваш Makefile должен будет скомпилировать библиотеку,
а затем скомпилировать ваш проект.
• Ваш проект должен быть написан в соответствии с нормой. Только norminette
является авторитетным.
• Вы должны тщательно обрабатывать ошибки. Ваша программа не может неожиданно
завершить работу (ошибка сегментации, ошибка шины, двойное освобождение и т. Д.)
• Ваша программа не может иметь утечек памяти.
• Вам нужно будет отправить файл с именем author, содержащий ваше имя
пользователя, за которым следует «\n» в корне вашего хранилища.
    $>cat -e author
    xlogin$
    ylogin$
    zlogin$
    alogin$
    $>
• Вам никогда не разрешается предоставлять код, который вы не написали
самостоятельно. Если есть какие-либо сомнения, вам будет предложено
перекодировать его, чтобы показать свою добросовестность.
• В рамках обязательной части вам разрешено использовать только следующие
функции libc:
    ◦ open
    ◦ read
    ◦ lseek
    ◦ write
    ◦ close
    ◦ malloc
    ◦ realloc
    ◦ free
    ◦ perror
    ◦ strerror
    ◦ exit
• Вы можете задать свои вопросы на форуме, на слабину ...
• Мы предоставим вам ассемблер и виртуальную машину, которые будут работать
правильно. Однако мы не будем предоставлять вам их исходные коды. Вам нужно
будет тщательно обдумать это.
• Всем удачи!

The assembler - Ассемблер

• Ваша виртуальная машина выполнит машинный код (или «байт-код»), который будет
сгенерирован вашим ассемблером. Ассемблер (программа) получит файл, написанный
на языке ассемблера, в качестве аргумента и сгенерирует чемпион, который будет
понят виртуальной машине.
• Это будет работать так:
    > ./asm mychampion.s
• Он будет читать код сборки, обработанный из файла .s, заданного в качестве
аргумента, и записать полученный байт-код в файл с именем, совпадающим с
аргументом, заменив расширение .s на .cor.
• В случае ошибки вам нужно будет отобразить соответствующее сообщение в
стандартном выводе ошибки, а не создавать файл .cor.


The langage and compilation - Язык и компиляция
1. Assembly language - Язык ассемблера

• Язык ассемблера состоит из одной инструкции в строке.
• Инструкция состоит из трех элементов: метка (необязательно), состоящая из
цепочки символов среди LABEL_CHARS, за которой следует LABEL_CHAR; код операции;
и его параметры, разделенные SEPARATOR_CHAR. Параметр может быть трех разных
типов:
    ◦ Registry: (r1 <-> rx with x = REG_NUMBER)
    ◦ Direct: символ DIRECT_CHAR, за которым следует числовое значение или метка
    (с предшествующим LABEL_CHAR), которая представляет прямое значение.
    ◦ Indirect: значение или метка (которой предшествует LABEL_CHAR),
    которая представляет значение, расположенное по адресу параметра,
    относительно PC текущего процесса.
• На этикетке не должно быть никаких инструкций, следующих за ней, или она
должна быть помещена в строку перед инструкцией, на которую она отвечает.
• Символ COMMENT_CHAR начинает комментарий.
• Чемпион также будет иметь имя и описание, которые должны быть в строке после
маркеров NAME_CMD_STRING и COMMENT_CMD_STRING.
• Все адреса относятся к PC и IDX_MOD, кроме lld, lldi и lfork.
• Количество циклов для каждой инструкции, их мнемонические представления,
соответствующее количество и возможные типы аргументов описаны в массиве op_tab,
объявленном в op.c. Циклы всегда расходуются.
• Все остальные коды не имеют другого действия, кроме как перейти к следующему и
потерять цикл.

• lfork: означает long-fork, чтобы иметь возможность раскошелиться на солому
с расстояния 15 метров, точно так же, как с ее кодом операции. То же, что вилка
без модуля по адресу.
• sti: код операции 11. Возьмите реестр, и два индекса (возможно, реестры)
добавляют эти два индекса и используют этот результат в качестве адреса, куда
будет скопировано значение первого параметра.
• fork: нет байта кодирования аргумента, возьмите индекс, код операции 0x0c.
Создайте новый процесс, который унаследует различные состояния своего отца,
кроме своего ПК, для которого будет задано значение
(PC + (1-й параметр % IDX_MOD)).
• lld: означает long-load, поэтому его код операции, очевидно, равен 13.
Он такой же, как ld, но без % IDX_MOD. Модифицируйте перенос.
• ld: взять случайный аргумент и реестр. Загрузите значение первого аргумента в
реестре. Его код операции равен 10 в двоичном коде, и он изменит перенос.
• add: код операции 4. Возьмите три реестра, добавьте первые два и
поместите результат в третий, прямо перед изменением переноса.
• zjmp: никогда не было, не будет и никогда не будет байта кодирования аргумента
 за этой операцией, где код операции равен 9. Он возьмет индекс и перейдет к
 этому адресу, если значение переноса равно 1.
• sub: то же, что и add, но с кодом операции est 0b101 и использует вычитание.
• ldi: ldi, ldi, как следует из названия, не подразумевает плавание в каштановом
креме, даже если его код 0x0a. Вместо этого он будет использовать 2 индекса и 1
реестр, добавляя первые два, обрабатывая его как адрес, считывая значение
размера реестра и помещая его в третий.
• or: эта операция является побитовым ИЛИ, в том же духе и принципе, и ее код
операции, очевидно, равен 7.
• st: взять реестр и реестр или косвенный и сохранить значение реестра для
второго аргумента. Его код операции 0x03. Например, st r1, 42 хранят значение r1
по адресу (ПК + (42 % IDX_MOD))
• aff: код операции 10 в шестнадцатеричном формате. Есть байт кодирования
аргумента, даже если он немного глупый, потому что есть только 1 аргумент,
который является реестром, который является реестром, и его содержимое
интерпретируется значением ASCII символа для отображения в стандартном выводе.
Код по модулю 256.
• live: инструкция, которая позволяет процессу остаться в живых. Он также может
записать, что игрок, чей номер является аргументом, действительно жив. Байт
кодирования аргумента отсутствует, код операции 0x01. Ох, и его единственный
аргумент на 4 байта.
• xor: действует как и с эксклюзивным ИЛИ. Как вы уже догадались, его
восьмеричный код операции равен 10.
• lldi: код операции 0x0e. То же, что ldi, но не применяется по модулю к
адресам. Это, однако, изменит керри.
• and: применить & (битовое к И) над первыми двумя аргументами и сохранить
результат в реестре, который является третьим аргументом. Код операции 0x06.
Модифицирует перенос.

2. Encoding - Кодирование

Каждая инструкция кодируется:
• Код инструкции (вы найдете его в op_tab).
• Байт кодирования аргумента, если необходимо. Будет сделано в соответствии со
следующими примерами:
    ◦ r2,23,%34 дает кодирующий байт 0b01111000, следовательно, 0x78
    ◦ 23,45,%34 дает кодирующий байт 0b11111000, следовательно, 0xF8
    ◦ r1,r3,34 дает кодирующий байт 0b01011100, следовательно, 0x5C
• Аргументы, основанные на следующих примерах:
    ◦ r2,23,%34 дает ACB 0x78, затем 0x02 0x00 0x17 0x00 0x00 0x00 0x22
    ◦ 23,45,%34 дает ACB 0xF8, затем 0x00 0x17 0x00 0x2d 0x00 0x00 0x00 0x22

Некоторые важные замечания:
• Исполняемый файл всегда начинается с заголовка, определенного в op.h типом
header_t.
• Виртуальная машина BIG ENDIAN. Спросите Google, что это значит.

2.1 Complete example of compilation - Полный пример компиляции

.name "zork"
.comment "just a basic living prog"
l2:     sti r1,\%:live,\%1
        and r1,\%0,r1
live:   live \%1
        zjmp \%:live
# Executable compilation:
#
# 0x0b,0x68,0x01,0x00,0x0f,0x00,0x01
# 0x06,0x64,0x01,0x00,0x00,0x00,0x00,0x01
# 0x01,0x00,0x00,0x00,0x01
# 0x09,0xff,0xfb

3. Champion’s execution - Чемпионское исполнение
• Предполагается, что виртуальная машина эмулирует абсолютно параллельную машину.
• Однако для целей реализации мы будем предполагать, что каждая инструкция
выполнится сама (полностью) в конце своего последнего цикла и будет ждать всей
ее продолжительности. Инструкции, заканчивающиеся в том же цикле, будут
выполняться в порядке убывания номера процессов.
• Да, последний рожденный (самый молодой) чемпион играет первым.


Bonus part - Бонусная часть

Вот несколько идей от 42:
• Графический интерфейс для виртуальной машины с использованием библиотеки по
вашему выбору. (OpenGL, SDL, nCurses ... все, что плавает на вашей лодке!)
• Режим сетевой игры
• Новые инструкции
• Поддержка математических операций в .s файлах.



Ressources
В вашем распоряжении справочные программы и несколько советов, которые окажутся
ценными:
• Ассемблер, а также виртуальная машина уже скомпилированы.
• Пара основных, но функциональных чемпионов.
• Виртуальная машина имеет опцию -n, которая позволяет иметь представление
ncurses, позволяющее вам лучше видеть игру.
Ассемблер, ВМ и чемпионы доступны на sgoinfre в папке с именем CoreWar. По
некоторым аспектам виртуальная машина и ассемблер делают немного больше, чем
требуется для обязательной части (больше опций), вам не нужно делать столько же.
Но я советую вам изучить эти варианты, это поможет вам лучше понять проект.
Немного важной информации:
• Вычислительная часть виртуальной машины может быть длинной. Это должно быть
так. Много процессов = много вычислительного времени.
• Вы задаете вопросы и оставляете отзывы на форуме, расслабляетесь и т. Д.